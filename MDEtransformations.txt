
Round 1. Find the most relevant works about: 


"interoperability" and ("emergency management" or "disaster risk reduction" or "situation awareness" or "disaster management" or "crisis management")


("interoperability") && ("emergency management" || "disaster risk reduction" || "situation awareness" || "disaster management" || "crisis management") 



("early warning systems") && ("interoperability") && ("emergency management" || "disaster risk reduction" || "situation awareness" || "disaster management" || "crisis management") 


("survey" OR "review" OR "state of the art") && ("early warning systems") && ("interoperability") && ("emergency management" || "disaster risk reduction" || "situation awareness" || "disaster management" || "crisis management") 



SS55:
("disaster risk reduction") and ("early warning systems") and ("interoperability") and ("emergency management" or "disaster risk reduction" or "situation awareness" or "disaster management" or "crisis management")

SS56-57: 
("early warning systems") and ("interoperability") and ("emergency management" or "disaster risk reduction" or "situation awareness" or "disaster management" or "crisis management") and (("function" OR "capability" OR "role" OR "mission" OR "goal" OR "requirement") or ("architecture" OR "framework"))


(("disaster risk reduction") and ("early warning systems") and ("interoperability")) or 
(("early warning systems") and ("interoperability") and ("emergency management" or "disaster risk reduction" or "situation awareness" or "disaster management" or "crisis management") and (("function" OR "capability" OR "role" OR "mission" OR "goal" OR "requirement") or ("architecture" OR "framework")))


("early warning systems") and ("interoperability") and ("function" OR "architecture" OR "framework")
----------------------------------------------------------------------


#Simon M: thanks for the code snipet, I think I got it now, it resembles (a little) with ATL. 

#Uffe: thanks for the link for the code template framework, it is helping a lot. The "MDA Transformations User Guide" is a good source too. 

#qwerty:

- About (2): I know that in practice the majority of transformations are built for code generation and I respect your opinion, but I disagree with you and it is not what MDE theory says. One can transform UML to BPMN (e.g. class properties to data objects) or from Archimate to UML (e.g. business information level to UML class), for example. 
Briefely explaining my project, OntoUML serves to define the context information, i.e. the elements to be perceived ("data objetcs"). E.g. patient, health unit, treatment. 
SML serves to define the comprehension of situations, i.e. a situation identification mechanism. E.g. a fever situation reflects the rule of a patient having his body temperature greater than 37, where the patient class with the body temperature attribute comes from OntoUML. 
After a validation and verification method (with http://www.menthor.net/) the code can be generated by other transformations, in different flavors: (i) an adaptation of DRL (Drools Rule Language) with CEP extension and (ii) EPL (Event Processing Language) of Java ESPER. There are numerous theories and theses behind this project. 
If you are interested in discussing that, I'd be glad to try to show that transformation in the same level does do something. But I don't think here in the forum is the appropriate place, I rather via Skype (id joao.luiz.rebelo.moreira) or Linkedin (https://br.linkedin.com/in/joão-luiz-rebelo-moreira-a5548418). Besides the papers I mentioned, I also recommend these theses of our group:
Guizzardi
Sobral
Sales

- Anyway, thanks for your suggestion! By following the WSDL transformation, I got what I needed:



- What is the API you mentioned? Sorry if it is a stupid question, I'm starting now with transformations in EA. 



In the transformation editor:
- How to delete trasnformation types (I created some as tests)?





Package
{
  name=%qt%SML participant elements (from OntoUML::%packageName%)%qt%
  namespaceroot="true"
  stereotype="SMLnamespace"

%list="Namespace" @separator="\n\n" @indent="  "%

  Component
  {
    %TRANSFORM_REFERENCE("Component",packageGUID)%
    name=%qt%%packageName%%qt%
    stereotype="WSDL"
%list="Namespace__Interface" @separator="\n\n" @indent=""%
  }
  
}

name=%qt%002- SML participants from OntoUML package:%packageName%%qt%

	
	name=%qt%%connectorSourceElemName%_%connectorSourceElemGUID%_%connectorDestElemName%_%connectorDestElemGUID%qt%
	
	language="SML"
	
	%if connectorStereotype=="Characterization"%
	stereotype=%qt%CharacterizationLink%qt%
	%elseIf connectorStereotype=="Mediation"%
	stereotype=%qt%MediationLink%qt%
	%elseIf connectorStereotype=="Formal"%
	stereotype=%qt%ContextFormalLink%qt%
	%endIf%
	




%TRANSFORM_CURRENT()%
	
%TRANSFORM_REFERENCE("Connector",connectorGUID)%




%if connectorStereotype!="Characterization" and connectorStereotype!="Mediation" and connectorStereotype!="Formal" and connectorStereotype!="Generalization" %
%endTemplate%




























